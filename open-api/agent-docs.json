{
  "openapi": "3.0.3",
  "info": {
    "title": "GetApp Agent REST-API",
    "description": "The Agent REST API facilitates management of software updates and map exports.",
    "version": "0.5"
  },
  "paths": {
    "/analyses": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Data Reporting",
        "description": "This functionality allows the system to report raw data in the form of key-value pairs for analytical purposes.\nThe reported data provides flexible and comprehensive insights into various metrics, supporting improved decision-making, service optimization, and enhancing the overall user experience.",
        "operationId": "matomo_js",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatomoBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/analyses/event": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Usage Event Reporting",
        "description": "This functionality allows the system to receive and report various types of usage events for analytical purposes.\nThe collected data provides valuable insights into user interactions, supporting better decision-making, service optimization, and improving the overall user experience",
        "operationId": "matomo_event",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatomoEventBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/config/map": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Map Configuration",
        "description": "This endpoint returns the current configuration related to map management.",
        "operationId": "get_map_config",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapConfig"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "General"
        ],
        "summary": "Map Configuration",
        "description": "This endpoint allows to update the configuration related to map management.",
        "operationId": "set_map_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapConfig"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/cancelItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Cancels the delivery of a component identified by `catalog_id`.",
        "description": "Cancels the ongoing delivery process for the specified component catalog ID.",
        "operationId": "cancel_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/deleteItem/{catalog_id}": {
      "delete": {
        "tags": [
          "Delivery"
        ],
        "summary": "Deletes a delivery item identified by `catalog_id`.",
        "description": "Deletes the specified delivery item identified by its catalog ID.",
        "operationId": "delete_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/downloadFile/{filename}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Downloads a file based on the provided filename.",
        "description": "Downloads the requested file based on the provided filename and returns it on success or an `AppError` on failure.",
        "operationId": "download_file",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/getReadyList": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves a list of components ready for delivery.",
        "description": "Retrieves and returns a list of components that are ready for delivery.",
        "operationId": "get_delivery_ready_list",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delivery/getStatusItem/{catalog_id}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves the delivery status of a component identified by `catalog_id`.",
        "description": "Retrieves and returns the delivery status of the specified component catalog ID.",
        "operationId": "get_delivery_status",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/pauseItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Pauses the delivery of a component identified by `catalog_id`.",
        "description": "Pauses the ongoing delivery process for the specified component catalog ID.",
        "operationId": "pause_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/prepareDelivery": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Prepares the cache for delivery based on the provided request.",
        "description": "Prepares the delivery cache for components based on the provided request and returns the preparation status.",
        "operationId": "prepare_delivery_cache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareDeliveryReqDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareDeliveryResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/preparedDelivery/{catalog_id}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves prepared delivery information for a component identified by `catalog_id`.",
        "description": "Retrieves and returns the prepared delivery information for the specified component catalog ID.",
        "operationId": "get_prepared_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareDeliveryResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/startItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Initiates the delivery of a component identified by `catalog_id`.",
        "description": "Starts the delivery process for the specified component catalog ID and returns the delivery status.",
        "operationId": "start_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/changeItemState/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Changes the deployment state of a component identified by `catalog_id`.",
        "description": "Changes the deployment state based on the provided state change object and returns the updated deployment information.",
        "operationId": "deploy_change_state",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployChangeStateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/getList": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "summary": "Retrieves a list of components available for deployment.",
        "description": "Retrieves and returns a list of components that are available for deployment.",
        "operationId": "get_deploy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/getStatusItem/{catalog_id}": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "summary": "Retrieves the deployment status of a component identified by `catalog_id`.",
        "description": "Retrieves and returns the deployment status of the specified component catalog ID.",
        "operationId": "get_deploy_status",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/item/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Deploys a component identified by `catalog_id`.",
        "description": "Initiates the deployment process for the specified component catalog ID.",
        "operationId": "deploy_item",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/messageItem/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Sends a deployment message for a component identified by `catalog_id`.",
        "description": "Sends a deployment message based on the provided deployment object and returns the updated deployment information.",
        "operationId": "deploy_message",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Deploy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discover/component": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Discover available components",
        "description": "Initiates the component discovery process and returns a list of available components (offering).",
        "operationId": "discover_comp",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discover/map": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Discover available map products",
        "description": "Initiates the map discovery process and returns a list of available map products.",
        "operationId": "discover_map",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapOfferingDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/getList": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Retrieves a list of discovered components.",
        "description": "Retrieves and return a list of components that have been discovered.",
        "operationId": "get_discovery",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/discovery/set/component": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Registers a component.",
        "description": "This endpoint allows a program to register with GetApp by providing its program details.",
        "operationId": "set_component",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverComponentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/start": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Initiates the discovery of components based on the provided request.",
        "description": "Starts the discovery process for components based on the provided list of component requests and returns an offering response.",
        "operationId": "start_discovery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscoverComponentDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingRes"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/generalDevice": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Retrieves general device data.",
        "description": "Retrieves and returns the current general device data.",
        "operationId": "get_general_device",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralData"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "General"
        ],
        "summary": "Updates general device data.",
        "description": "Updates the general device data based on the provided request body and returns a success response.",
        "operationId": "update_general_device",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health-check": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Health Check",
        "description": "This endpoint performs a health check on the GetApp agent, including checking the status of the network connection and server connectivity.\nThe network connection status is determined by attempting to connect to the URL specified in the `NETWORK_AVAILABILITY_URL` environment variable.",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        }
      }
    },
    "/im/command": {
      "post": {
        "tags": [
          "Installation Machine"
        ],
        "summary": "Send commands to other agents.",
        "description": "This service message enables the Installation Machine to transmit commands to other agents through DDS.",
        "operationId": "send_command",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IMCommandDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/im/syncWithServer": {
      "post": {
        "tags": [
          "Installation Machine"
        ],
        "summary": "Sync devices discoveries with Get-app server.",
        "description": "This service pulls and pushes devices discoveries from and to the server.",
        "operationId": "sync_with_server",
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to initiate the creation of an up-to-date map stamp import.",
        "description": "Initiates the process to create a map stamp import based on provided map properties such as zoom level,\ntarget resolution, raster, bounding box, and last update.",
        "operationId": "map_import_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create/cancel/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to cancel a map creation process.",
        "description": "Cancels the map creation process identified by `reqId`.",
        "operationId": "map_create_cancel",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create/status/{reqId}": {
      "get": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Retrieves the current status of a map stamp creation.",
        "description": "Retrieves and returns the current status of the specified map stamp creation identified by `reqId`.",
        "operationId": "get_map_create_status",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/cancel/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to cancel downloading a map stamp.",
        "description": "This endpoint cancels the download process for a map import request identified by `reqId`.",
        "operationId": "get_map_delivery_cancel",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/delete/{reqId}": {
      "delete": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to delete a downloaded map stamp.",
        "description": "This endpoint deletes the downloaded map stamp for a map import request identified by `reqId`.",
        "operationId": "get_map_delivery_delete",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/pause/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to stop downloading a map stamp.",
        "description": "This endpoint pauses the download process for a map import request identified by `reqId`.",
        "operationId": "get_map_delivery_pause",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/start/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to continue downloading a stamp from a map that has been stopped.",
        "description": "This endpoint resumes the download process for a paused map import request identified by `reqId`.",
        "operationId": "get_map_delivery_start",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/status/{reqId}": {
      "get": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Retrieves the current status of a map stamp download.",
        "description": "Retrieves and returns the current status of the specified map stamp download.",
        "operationId": "get_map_delivery_status",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryStatusDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/deploy/status/{reqId}": {
      "get": {
        "tags": [
          "Map Import - Deploy"
        ],
        "summary": "Retrieves the installation status of a map stamp deployment.",
        "description": "Retrieves and returns the installation status of the map stamp deployment identified by `reqId`.",
        "operationId": "get_map_deploy_status",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/deploy/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Deploy"
        ],
        "summary": "Allows the sender to notify the installation status of a map stamp.",
        "description": "Sends a message to notify the installation status of a map stamp identified by `reqId`.",
        "operationId": "get_map_deploy",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapDeployStatusMesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/resume/{reqId}": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to resume an existing map import process.",
        "description": "Resumes the map import process identified by `reqId`, which can be used for maps in an error state\nor out-of-date maps, among other scenarios.",
        "operationId": "get_map_resume",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve the list of maps in the inventory.",
        "description": "This endpoint returns a list of all maps currently available in the inventory.\nThe list provides detailed information about each map, including its metadata, paths,\nand imaging dates.",
        "operationId": "get_inventory_maps",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DetailedMapInventory"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/approveDelete/{reqId}": {
      "post": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Approve deletion of a specific map identified by its import request ID.",
        "description": "This endpoint approves the deletion of a map that has been requested for deletion.\nMaps will not be deleted until they are approved by this endpoint or by updating the `getmap.json` file.",
        "operationId": "approve_map_delete",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "description": "The unique identifier of the map import request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStorageStatusEnum"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/deletionRequests": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve maps that are requested for deletion.",
        "description": "This endpoint retrieves a list of maps that have been requested for deletion.\nTo approve the deletion of a map, use the endpoint `/map/inventory/approveDelete/{reqId}`.",
        "operationId": "get_deletion_requested",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/discover": {
      "post": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Initiate the discovery process for the map inventory.",
        "description": "This endpoint initiates the discovery process for the inventory of maps\nand returns a response indicating the status of the operation.",
        "operationId": "inventory_discover",
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/discover/date": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve the lats inventory update date",
        "description": "This endpoint retrieves a date time as a sting, that contain the date of the last inventory discover process",
        "operationId": "get_last_inventory_discover_time",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/isUpdate": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve update information for all maps.",
        "description": "This endpoint retrieves and returns update information for all maps in the inventory.",
        "operationId": "get_maps_updates",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapIsUpdateDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/isUpdate/{reqId}": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve update information for a specific map.",
        "description": "This endpoint retrieves and returns update information for the map identified by the given `reqId`.",
        "operationId": "get_map_update_by_id",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "description": "The unique identifier of the map import request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapIsUpdateDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/obsolete": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve a list of all obsoleted maps.",
        "description": "This endpoint retrieves a list of all maps (identified by the given `reqId`) that have been marked as obsoleted in the inventory.",
        "operationId": "get_obsoleted",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/purge": {
      "post": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Purge all maps marked as \"DeletedApprove\".",
        "description": "This endpoint removes all maps from the inventory that have been assigned the \"DeletedApprove\" status.\nOnly maps that have been approved for deletion will be purged.",
        "operationId": "purge_maps",
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/{reqId}": {
      "put": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Update properties of a specific map identified by its import request ID.",
        "description": "This endpoint updates the properties of the map identified by `reqId`, such as its name,\nand returns a response indicating the update status.",
        "operationId": "put_map",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "description": "The unique identifier of the map import request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapPutDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStatusDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Request deletion of a specific map identified by its import request ID.",
        "description": "This endpoint requests the deletion of a map. The map will not be deleted immediately;\nit will be marked for deletion and requires approval, either through this API or by updating the `getmap.json` file.",
        "operationId": "delete_map",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "description": "The unique identifier of the map import request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStorageStatusEnum"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/status/{reqId}": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve the current status of a specific map import request.",
        "description": "This endpoint retrieves and returns the current status of the map identified by the given `reqId`.",
        "operationId": "get_map_status",
        "parameters": [
          {
            "name": "reqId",
            "in": "path",
            "description": "The unique identifier of the map import request",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStatusDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/maps/events/download-failed": {
      "get": {
        "tags": [
          "Server-Sent Events"
        ],
        "summary": "Subscribe to the \"map download/import failed\" event.",
        "description": "This endpoint allows clients to subscribe to server-sent events (SSE) that notify\nthem when a map download or import has failed. The response includes basic information\nabout the map associated with the failed operation.",
        "operationId": "download_failed_map_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseMapInventory"
                }
              }
            }
          }
        }
      }
    },
    "/maps/events/new": {
      "get": {
        "tags": [
          "Server-Sent Events"
        ],
        "summary": "Subscribe to the \"new map\" event.",
        "description": "This endpoint allows clients to subscribe to server-sent events (SSE) that notify\nthem when a new map is added to the inventory. The response includes detailed\ninformation about the new map.",
        "operationId": "new_map_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedMapInventory"
                }
              }
            }
          }
        }
      }
    },
    "/maps/events/obsoleted": {
      "get": {
        "tags": [
          "Server-Sent Events"
        ],
        "summary": "Subscribe to the \"map obsolescence\" event.",
        "description": "This endpoint allows clients to subscribe to server-sent events (SSE) that notify\nthem when any map in the inventory has become obsolete. Additionally, the endpoint\nsends an event if the check against the server fails. The response includes\ninformation about any obsoleted maps and any errors encountered during the check.",
        "operationId": "obsoleted_map_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObsoletedMapsEvent"
                }
              }
            }
          }
        }
      }
    },
    "/maps/events/on-change": {
      "get": {
        "tags": [
          "Server-Sent Events"
        ],
        "summary": "Subscribe to the \"map change\" event.",
        "description": "This endpoint allows clients to subscribe to server-sent events (SSE) that notify\nthem when a map changed.",
        "operationId": "on_change_map_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStatusDto"
                }
              }
            }
          }
        }
      }
    },
    "/maps/events/request-delete": {
      "get": {
        "tags": [
          "Server-Sent Events"
        ],
        "summary": "Subscribe to the \"map request-delete\" event.",
        "description": "This endpoint allows clients to subscribe to server-sent events (SSE) that notify\nthem when a map in the inventory has been marked for deletion. The response includes\nbasic information about the map marked for deletion.",
        "operationId": "request_delete_map_event",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseMapInventory"
                }
              }
            }
          }
        }
      }
    },
    "/maps/status": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieve the current status of all map import requests.",
        "description": "This endpoint retrieves and returns the current status of all map import requests in the inventory.",
        "operationId": "get_maps_status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapStatusDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/offering/getList": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Retrieves a list of available offerings.",
        "description": "Retrieves and returns a list of components that are available as offerings.",
        "operationId": "get_offering",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updateDeviceStatus": {
      "put": {
        "tags": [
          "General"
        ],
        "summary": "Updates device status.",
        "description": "Updates the device status based on the provided request body and returns a success response.",
        "operationId": "update_device_status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceStatusDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppError": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ClientError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "InternetConnectionError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "UnauthorizedError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "InternalServerError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "MissingDataError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ParsingFailedError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "WritingDataError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ForbiddenError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "NotAllowedError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ValidationError"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "msg"
            ],
            "properties": {
              "msg": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "SQLError"
                ]
              }
            }
          }
        ],
        "description": "Represents various types of errors that can occur in the application.\n\nWhen serialized, it will be represented in the following format:\n\n```json\n{\n\"type\": \"ErrorType\",\n\"msg\": \"ErrorMessage\"\n}\n```\n\nWhere:\n- `type` is the specific error type (e.g., `ClientError`, `InternalServerError`).\n- `msg` is the associated error message (a string).",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AppErrorResponse": {
        "type": "object",
        "required": [
          "name",
          "statusCode",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "BaseMapInventory": {
        "type": "object",
        "description": "Represents the base inventory information of a map.",
        "required": [
          "reqId",
          "name"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AppError"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the map or the inventory item."
          },
          "reqId": {
            "type": "string",
            "description": "Request ID associated with the map inventory."
          }
        }
      },
      "Command": {
        "type": "string",
        "enum": [
          "Discovery"
        ]
      },
      "ComponentResDto": {
        "type": "object",
        "description": "Software DTO struct ['ComponentResDto']\n\nused for Agent client to received the installed and deployed softwares list",
        "required": [
          "name",
          "versionNumber",
          "catalogId"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              }
            ],
            "nullable": true
          },
          "deploy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Deploy"
              }
            ],
            "nullable": true
          },
          "latest": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "offer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Offer"
              }
            ],
            "nullable": true
          },
          "releaseNotes": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ComponentState"
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentResDto"
            }
          },
          "uploadDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "versionNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ComponentState": {
        "type": "string",
        "enum": [
          "discovery",
          "offered",
          "delivery",
          "deploy"
        ]
      },
      "Delivery": {
        "type": "object",
        "required": [
          "refId",
          "isStartDeploy",
          "type"
        ],
        "properties": {
          "bitNumber": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveryStatus": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "downloadData": {
            "type": "number",
            "format": "float"
          },
          "downloadDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "downloadEstimateTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "downloadSpeed": {
            "type": "number",
            "format": "double"
          },
          "downloadStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "downloadStop": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isStartDeploy": {
            "type": "boolean"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "DeliveryStatus": {
        "type": "string",
        "enum": [
          "Start",
          "Done",
          "Error",
          "Cancelled",
          "Pause",
          "Continue",
          "Download"
        ]
      },
      "DeliveryStatusDto": {
        "type": "object",
        "required": [
          "importRequestId",
          "status"
        ],
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimationTimeToDownload": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "importRequestId": {
            "type": "string"
          },
          "progress": {
            "type": "number",
            "format": "float"
          },
          "status": {
            "$ref": "#/components/schemas/DeliveryStatusEnum"
          }
        }
      },
      "DeliveryStatusEnum": {
        "type": "string",
        "enum": [
          "Start",
          "InProgress",
          "Done",
          "Pause",
          "Cancel",
          "Error"
        ]
      },
      "Deploy": {
        "type": "object",
        "required": [
          "refId",
          "type"
        ],
        "properties": {
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployChangeState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          },
          "deployDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployEstimateTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "deployStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          },
          "deployStop": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "messageLog": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "DeployChangeStateDto": {
        "type": "object",
        "properties": {
          "deployChangeState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          }
        }
      },
      "DeploymentStatus": {
        "type": "string",
        "enum": [
          "Start",
          "Done",
          "Installing",
          "Continue",
          "Pause",
          "Cancelled",
          "Error",
          "Uninstall"
        ]
      },
      "DetailedMapInventory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMapInventory"
          },
          {
            "type": "object",
            "required": [
              "footprint",
              "paths"
            ],
            "properties": {
              "availabilityDate": {
                "type": "string",
                "format": "date-time",
                "description": "Optional: The date when the map is made available for use, if applicable.",
                "nullable": true
              },
              "beginImagingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Optional: start date of imaging for the map, if applicable.",
                "nullable": true
              },
              "endImagingDate": {
                "type": "string",
                "format": "date-time",
                "description": "Optional: end date of imaging for the map, if applicable.",
                "nullable": true
              },
              "footprint": {
                "type": "string",
                "description": "Footprint of the map, usually represented as a string."
              },
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Paths to the .gpkg and .json files on the filesystem."
              }
            }
          }
        ],
        "description": "Represents a detailed inventory of a map, containing various attributes related to the map."
      },
      "DeviceStatusDto": {
        "type": "object",
        "required": [
          "deviceId",
          "availableStorageInKB"
        ],
        "properties": {
          "availableBattery": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "availableStorageInKB": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "deviceId": {
            "type": "string"
          }
        }
      },
      "DiscoverComponentDto": {
        "type": "object",
        "description": "Software DTO struct ['DiscoverComponentDto']\n\nused for Agent client to discover the installed and deployed software",
        "required": [
          "name",
          "versionNumber",
          "catalogId"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "latest": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "releaseNotes": {
            "type": "string"
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscoverComponentDto"
            }
          },
          "uploadDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "versionNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "General": {
        "type": "object",
        "required": [
          "personalDevice",
          "situationalDevice",
          "physicalDevice"
        ],
        "properties": {
          "personalDevice": {
            "$ref": "#/components/schemas/PersonalDevice"
          },
          "physicalDevice": {
            "$ref": "#/components/schemas/PhysicalDevice"
          },
          "situationalDevice": {
            "$ref": "#/components/schemas/SituationalDevice"
          }
        }
      },
      "GeneralData": {
        "type": "object",
        "required": [
          "general",
          "softwareData"
        ],
        "properties": {
          "discoveryType": {
            "type": "string",
            "nullable": true
          },
          "general": {
            "$ref": "#/components/schemas/General"
          },
          "softwareData": {
            "$ref": "#/components/schemas/SoftwareData"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "required": [
          "network"
        ],
        "properties": {
          "network": {
            "$ref": "#/components/schemas/NetworkConnection"
          }
        }
      },
      "IMCommandDto": {
        "type": "object",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "$ref": "#/components/schemas/Command"
          }
        }
      },
      "ItemType": {
        "type": "string",
        "enum": [
          "software",
          "map",
          "cache"
        ]
      },
      "Location": {
        "type": "object",
        "required": [
          "lat",
          "long",
          "alt"
        ],
        "properties": {
          "alt": {
            "type": "string"
          },
          "lat": {
            "type": "string"
          },
          "long": {
            "type": "string"
          }
        }
      },
      "MapConfig": {
        "type": "object",
        "properties": {
          "lastObsoleteCheck": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the last obsolescence check was performed.",
            "nullable": true
          },
          "obsoleteCheckInterval": {
            "type": "number",
            "format": "float",
            "description": "The interval in hours between obsolescence checks.",
            "nullable": true
          },
          "tileLayerProps": {
            "type": "string",
            "description": "The properties for the available layer, like urls, source type, etc.",
            "nullable": true
          }
        }
      },
      "MapCreateDto": {
        "type": "object",
        "description": "Map DTO struct ['MapCreateDto']\n\nused for 'Agent UI' client at 'import create' message",
        "required": [
          "mapProperties"
        ],
        "properties": {
          "mapProperties": {
            "$ref": "#/components/schemas/MapPropsDto"
          }
        }
      },
      "MapCreateStatus": {
        "type": "string",
        "enum": [
          "Start",
          "InProgress",
          "Done",
          "Cancel",
          "Error",
          "Pause",
          "Pending",
          "Expired",
          "Archived"
        ]
      },
      "MapCreateStatusResDto": {
        "type": "object",
        "description": "Map DTO struct ['MapCreateStatusResDto']\n\nused the response the 'Agent UI' client as 'import create' message or 'get import create status' request",
        "required": [
          "importRequestId",
          "status"
        ],
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "importRequestId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MapCreateStatus"
          }
        }
      },
      "MapDeployStatusMesDto": {
        "type": "object",
        "description": "Map DTO struct ['MapDeployStatusMesDto']\n\nused to ger from Agent UI a deploy message",
        "required": [
          "status"
        ],
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/DeploymentStatus"
          }
        }
      },
      "MapIsUpdateDto": {
        "type": "object",
        "description": "Map DTO struct ['MapIsUpdateDto']\n\nused to response the Agent UI client with the 'is_updated' status",
        "required": [
          "reqId",
          "isUpdate"
        ],
        "properties": {
          "isUpdate": {
            "type": "boolean"
          },
          "reqId": {
            "type": "string"
          }
        }
      },
      "MapOfferingDto": {
        "type": "object",
        "required": [
          "products",
          "push",
          "status"
        ],
        "properties": {
          "errorMsg": {
            "type": "string",
            "nullable": true
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MapProductDto"
            }
          },
          "push": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/MapOfferingStatus"
          }
        }
      },
      "MapOfferingStatus": {
        "type": "string",
        "enum": [
          "Success",
          "Error"
        ]
      },
      "MapProductDto": {
        "type": "object",
        "required": [
          "id",
          "productId",
          "footprint"
        ],
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "footprint": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imagingTimeBeginUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "imagingTimeEndUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ingestionDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "maxResolutionDeg": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "productSubType": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "productVersion": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "region": {
            "type": "string",
            "nullable": true
          },
          "transparency": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MapProps": {
        "type": "object",
        "description": "Map DTO struct ['MapProps']\n\nfor app inner using",
        "required": [
          "productName",
          "productId",
          "boundingBox",
          "zoomLevel",
          "targetResolution"
        ],
        "properties": {
          "boundingBox": {
            "type": "string"
          },
          "lastUpdateAfter": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "targetResolution": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "zoomLevel": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "MapPropsDto": {
        "type": "object",
        "description": "Map DTO struct ['MapPropsDto']\n\nused for 'Agent UI' client at 'import create' message",
        "required": [
          "boundingBox"
        ],
        "properties": {
          "boundingBox": {
            "type": "string"
          },
          "doFast": {
            "type": "boolean",
            "nullable": true
          },
          "lastUpdateAfter": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "targetResolution": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "zoomLevel": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "MapPutDto": {
        "type": "object",
        "description": "Inventory DTO struct ['MapPutDto']",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MapState": {
        "type": "string",
        "enum": [
          "create",
          "prepare",
          "delivery",
          "validation",
          "deploy"
        ]
      },
      "MapStatusDto": {
        "type": "object",
        "description": "Inventory DTO struct ['MapStatusDto']",
        "required": [
          "createdDate",
          "updatedDate",
          "reqId",
          "mapProperties",
          "isUpdated",
          "storageStatus",
          "state"
        ],
        "properties": {
          "area": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "beginImagingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "downloadDuration": {
            "type": "integer",
            "format": "int32",
            "description": "download duration in seconds",
            "nullable": true
          },
          "downloadETA": {
            "type": "integer",
            "format": "int32",
            "description": "download estimated time in seconds",
            "nullable": true
          },
          "endImagingDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "errMes": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "footprint": {
            "type": "string",
            "nullable": true
          },
          "isUpdated": {
            "type": "boolean"
          },
          "mapProperties": {
            "$ref": "#/components/schemas/MapProps"
          },
          "progress": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "reqId": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/MapState"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          },
          "storageStatus": {
            "$ref": "#/components/schemas/MapStorageStatusEnum"
          },
          "updateBy": {
            "type": "string",
            "nullable": true
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MapStorageStatusEnum": {
        "type": "string",
        "enum": [
          "initializing",
          "ready",
          "deleteRequest",
          "deleteApprove",
          "deleted"
        ]
      },
      "MatomoBody": {
        "type": "object",
        "properties": {
          "events": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatomoEventTypes"
              }
            ],
            "nullable": true
          }
        }
      },
      "MatomoEventBody": {
        "type": "object",
        "required": [
          "category",
          "action"
        ],
        "properties": {
          "action": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MatomoEventTypes": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ]
      },
      "NetworkConnection": {
        "type": "object",
        "required": [
          "internetConnection",
          "serverConnection"
        ],
        "properties": {
          "errMsg": {
            "type": "string",
            "description": "An optional error message if there was an issue with the connections.",
            "nullable": true
          },
          "internetConnection": {
            "type": "boolean",
            "description": "Indicates whether the agent has an active internet connection."
          },
          "serverConnection": {
            "type": "boolean",
            "description": "Indicates whether the agent can successfully connect to the server."
          }
        }
      },
      "ObsoletedMapsEvent": {
        "type": "object",
        "description": "Represents an event to check if any maps are obsoleted in the inventory.",
        "required": [
          "obsoleted"
        ],
        "properties": {
          "error": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AppError"
              }
            ],
            "nullable": true
          },
          "lastCheck": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the inventory was checked against the server to determine\nif there are any obsolete maps.",
            "nullable": true
          },
          "obsoleted": {
            "type": "boolean",
            "description": "Indicates whether there is any map in the inventory that is obsoleted."
          }
        }
      },
      "Offer": {
        "type": "object",
        "required": [
          "catalogId",
          "isStartDownload"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/OfferAction"
          },
          "catalogId": {
            "type": "string"
          },
          "isStartDownload": {
            "type": "boolean"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          },
          "offeredDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OfferAction": {
        "type": "string",
        "enum": [
          "offer",
          "push"
        ]
      },
      "OfferingCompRes": {
        "type": "object",
        "required": [
          "isNewVersion"
        ],
        "properties": {
          "isNewVersion": {
            "type": "boolean"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRes"
              }
            ],
            "nullable": true
          }
        }
      },
      "OfferingRes": {
        "type": "object",
        "required": [
          "software",
          "maps"
        ],
        "properties": {
          "maps": {
            "$ref": "#/components/schemas/MapOfferingDto"
          },
          "software": {
            "$ref": "#/components/schemas/OfferingCompRes"
          }
        }
      },
      "PersonalDevice": {
        "type": "object",
        "required": [
          "name",
          "idNumber",
          "personalNumber"
        ],
        "properties": {
          "idNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personalNumber": {
            "type": "string"
          }
        }
      },
      "PhysicalDevice": {
        "type": "object",
        "required": [
          "MAC",
          "ID",
          "IP",
          "OS",
          "serialNumber",
          "possibleBandwidth",
          "availableStorage"
        ],
        "properties": {
          "ID": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "MAC": {
            "type": "string"
          },
          "OS": {
            "type": "string"
          },
          "availableStorage": {
            "type": "string"
          },
          "possibleBandwidth": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "Platform": {
        "type": "object",
        "required": [
          "name",
          "platformNumber",
          "virtualSize"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "platformNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "integer"
          }
        }
      },
      "PlatformRes": {
        "type": "object",
        "required": [
          "name",
          "components"
        ],
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentResDto"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PrepareDeliveryReqDto": {
        "type": "object",
        "required": [
          "catalogId",
          "deviceId",
          "itemType"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "PrepareDeliveryResDto": {
        "type": "object",
        "required": [
          "catalogId",
          "status"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PrepareStatus"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PrepareStatus": {
        "type": "string",
        "enum": [
          "start",
          "inProgress",
          "done",
          "error"
        ]
      },
      "SituationalDevice": {
        "type": "object",
        "required": [
          "weather",
          "bandwidth",
          "time",
          "operativeState",
          "power",
          "location"
        ],
        "properties": {
          "availableStorage": {
            "type": "string",
            "nullable": true
          },
          "bandwidth": {
            "type": "integer",
            "format": "int64"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "operativeState": {
            "type": "boolean"
          },
          "power": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "time": {
            "type": "string"
          },
          "weather": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SoftwareData": {
        "type": "object",
        "required": [
          "formation",
          "platform"
        ],
        "properties": {
          "formation": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Discovery",
      "description": "Endpoints related to discovering and retrieving information about components available for delivery."
    },
    {
      "name": "Delivery",
      "description": "Endpoints related to managing the delivery of software components. This includes starting, pausing, canceling, and retrieving the status of deliveries, as well as preparing and retrieving prepared delivery information."
    },
    {
      "name": "General",
      "description": "Endpoints related to managing and retrieving general device information and status."
    },
    {
      "name": "Deploy",
      "description": "Endpoints related to managing and retrieving information about component deployment operations."
    },
    {
      "name": "Offering",
      "description": "Endpoints related to retrieving information about available offerings."
    },
    {
      "name": "Map Import - Create",
      "description": "Endpoints related to managing and retrieving information about map export processes."
    },
    {
      "name": "Map Import - Delivery",
      "description": "Endpoints for managing the download and status of map stamps."
    },
    {
      "name": "Map Import - Deploy",
      "description": "Endpoints related to managing and retrieving information about map deployment processes."
    },
    {
      "name": "Map - Inventory",
      "description": "Endpoints for managing and querying map inventory, including status updates, inventory discovery, and deletion operations."
    },
    {
      "name": "Server-Sent Events",
      "description": "Endpoints related to subscription to Sever Events."
    },
    {
      "name": "Installation Machine",
      "description": "Endpoints related to managing communication and synchronization tasks for an Installation Machine within the system."
    },
    {
      "name": "Analytics",
      "description": "Endpoints for managing and analyzing the data usage, including sending, updating, storing, and collecting this data for analytics purposes."
    }
  ]
}