{
  "openapi": "3.0.3",
  "info": {
    "title": "GetApp Agent REST-API",
    "description": "The Agent REST API facilitates management of software updates and map exports.",
    "version": "0.5"
  },
  "paths": {
    "/delivery/cancelItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Cancels the delivery of a component identified by `catalog_id`.",
        "description": "Cancels the ongoing delivery process for the specified component catalog ID.",
        "operationId": "cancel_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/deleteItem/{catalog_id}": {
      "delete": {
        "tags": [
          "Delivery"
        ],
        "summary": "Deletes a delivery item identified by `catalog_id`.",
        "description": "Deletes the specified delivery item identified by its catalog ID.",
        "operationId": "delete_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/downloadFile/{filename}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Downloads a file based on the provided filename.",
        "description": "Downloads the requested file based on the provided filename and returns it on success or an `AppError` on failure.",
        "operationId": "download_file",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/getReadyList": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves a list of components ready for delivery.",
        "description": "Retrieves and returns a list of components that are ready for delivery.",
        "operationId": "get_delivery_ready_list",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delivery/getStatusItem/{catalog_id}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves the delivery status of a component identified by `catalog_id`.",
        "description": "Retrieves and returns the delivery status of the specified component catalog ID.",
        "operationId": "get_delivery_status",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Delivery"
                }
              }
            }
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/pauseItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Pauses the delivery of a component identified by `catalog_id`.",
        "description": "Pauses the ongoing delivery process for the specified component catalog ID.",
        "operationId": "pause_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/prepareDelivery": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Prepares the cache for delivery based on the provided request.",
        "description": "Prepares the delivery cache for components based on the provided request and returns the preparation status.",
        "operationId": "prepare_delivery_cache",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareDeliveryReqDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareDeliveryResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/preparedDelivery/{catalog_id}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Retrieves prepared delivery information for a component identified by `catalog_id`.",
        "description": "Retrieves and returns the prepared delivery information for the specified component catalog ID.",
        "operationId": "get_prepared_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareDeliveryResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/delivery/startItem/{catalog_id}": {
      "post": {
        "tags": [
          "Delivery"
        ],
        "summary": "Initiates the delivery of a component identified by `catalog_id`.",
        "description": "Starts the delivery process for the specified component catalog ID and returns the delivery status.",
        "operationId": "start_delivery",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/changeItemState/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Changes the deployment state of a component identified by `catalog_id`.",
        "description": "Changes the deployment state based on the provided state change object and returns the updated deployment information.",
        "operationId": "deploy_change_state",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeployChangeStateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/getList": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "summary": "Retrieves a list of components available for deployment.",
        "description": "Retrieves and returns a list of components that are available for deployment.",
        "operationId": "get_deploy",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/getStatusItem/{catalog_id}": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "summary": "Retrieves the deployment status of a component identified by `catalog_id`.",
        "description": "Retrieves and returns the deployment status of the specified component catalog ID.",
        "operationId": "get_deploy_status",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/item/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Deploys a component identified by `catalog_id`.",
        "description": "Initiates the deployment process for the specified component catalog ID.",
        "operationId": "deploy_item",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/messageItem/{catalog_id}": {
      "post": {
        "tags": [
          "Deploy"
        ],
        "summary": "Sends a deployment message for a component identified by `catalog_id`.",
        "description": "Sends a deployment message based on the provided deployment object and returns the updated deployment information.",
        "operationId": "deploy_message",
        "parameters": [
          {
            "name": "catalog_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Deploy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/discovery/getList": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Retrieves a list of discovered components.",
        "description": "Retrieves and returns a list of components that have been discovered.",
        "operationId": "get_discovery",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/discovery/start": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Initiates the discovery of components based on the provided request.",
        "description": "Starts the discovery process for components based on the provided list of component requests and returns an offering response.",
        "operationId": "start_discovery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComponentReqDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferingRes"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/generalDevice": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Retrieves general device data.",
        "description": "Retrieves and returns the current general device data.",
        "operationId": "get_general_device",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralData"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "General"
        ],
        "summary": "Updates general device data.",
        "description": "Updates the general device data based on the provided request body and returns a success response.",
        "operationId": "update_general_device",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/im/command": {
      "post": {
        "tags": [
          "Installation Machine"
        ],
        "summary": "Send commands to other agents.",
        "description": "This service message enables the Installation Machine to transmit commands to other agents through DDS.",
        "operationId": "send_command",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IMCommandDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "405": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/im/syncWithServer": {
      "post": {
        "tags": [
          "Installation Machine"
        ],
        "summary": "Sync devices discoveries with Get-app server.",
        "description": "This service pulls and pushes devices discoveries from and to the server.",
        "operationId": "sync_with_server",
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to initiate the creation of an up-to-date map stamp import.",
        "description": "Initiates the process to create a map stamp import based on provided map properties such as zoom level,\ntarget resolution, raster, bounding box, and last update.",
        "operationId": "map_import_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create/cancel/{import_request_id}": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to cancel a map creation process.",
        "description": "Cancels the map creation process identified by `import_request_id`.",
        "operationId": "map_create_cancel",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/create/status/{import_request_id}": {
      "get": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Retrieves the current status of a map stamp creation.",
        "description": "Retrieves and returns the current status of the specified map stamp creation identified by `import_request_id`.",
        "operationId": "get_map_create_status",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/cancel/{import_request_id}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to cancel downloading a map stamp.",
        "description": "This endpoint cancels the download process for a map import request identified by `import_request_id`.",
        "operationId": "get_map_delivery_cancel",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/delete/{import_request_id}": {
      "delete": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to delete a downloaded map stamp.",
        "description": "This endpoint deletes the downloaded map stamp for a map import request identified by `import_request_id`.",
        "operationId": "get_map_delivery_delete",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/pause/{import_request_id}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to stop downloading a map stamp.",
        "description": "This endpoint pauses the download process for a map import request identified by `import_request_id`.",
        "operationId": "get_map_delivery_pause",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/start/{import_request_id}": {
      "post": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Allows the sender to continue downloading a stamp from a map that has been stopped.",
        "description": "This endpoint resumes the download process for a paused map import request identified by `import_request_id`.",
        "operationId": "get_map_delivery_start",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/delivery/status/{import_request_id}": {
      "get": {
        "tags": [
          "Map Import - Delivery"
        ],
        "summary": "Retrieves the current status of a map stamp download.",
        "description": "Retrieves and returns the current status of the specified map stamp download.",
        "operationId": "get_map_delivery_status",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryStatusDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/deploy/status/{importRequestId}": {
      "get": {
        "tags": [
          "Map Import - Deploy"
        ],
        "summary": "Retrieves the installation status of a map stamp deployment.",
        "description": "Retrieves and returns the installation status of the map stamp deployment identified by `importRequestId`.",
        "operationId": "get_map_deploy_status",
        "parameters": [
          {
            "name": "importRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Deploy"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/deploy/{importRequestId}": {
      "post": {
        "tags": [
          "Map Import - Deploy"
        ],
        "summary": "Allows the sender to notify the installation status of a map stamp.",
        "description": "Sends a message to notify the installation status of a map stamp identified by `importRequestId`.",
        "operationId": "get_map_deploy",
        "parameters": [
          {
            "name": "importRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapDeployStatusMesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/import/resume/{import_request_id}": {
      "post": {
        "tags": [
          "Map Import - Create"
        ],
        "summary": "Allows the consumer to resume an existing map import process.",
        "description": "Resumes the map import process identified by `import_request_id`, which can be used for maps in an error state\nor out-of-date maps, among other scenarios.",
        "operationId": "get_map_resume",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapCreateStatusResDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/discover": {
      "post": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Initiates the discovery process for the inventory of maps.",
        "description": "Initiates the inventory discovery process and returns a response indicating the status.",
        "operationId": "inventory_discover",
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/isUpdate": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieves the update information for all maps.",
        "description": "Retrieves and returns the update information for all maps.",
        "operationId": "get_maps_updates",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapIsUpdateDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/isUpdate/{importRequestId}": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieves the update information for a specific map.",
        "description": "Retrieves and returns the update information for the map identified by `importRequestId`.",
        "operationId": "get_map_update_by_id",
        "parameters": [
          {
            "name": "importRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapIsUpdateDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/inventory/{importRequestId}": {
      "delete": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Deletes a specific map identified by its import request ID.",
        "description": "Deletes the map identified by `importRequestId` and returns a response indicating the deletion status.",
        "operationId": "delete_map",
        "parameters": [
          {
            "name": "importRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/map/status/{import_request_id}": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieves the current status of a specific map import request.",
        "description": "Retrieves and returns the current status of the map identified by `import_request_id`.",
        "operationId": "get_map_status",
        "parameters": [
          {
            "name": "import_request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapStatusDto"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/maps/status": {
      "get": {
        "tags": [
          "Map - Inventory"
        ],
        "summary": "Retrieves the current status of all map import requests.",
        "description": "Retrieves and returns the current status of all map import requests.",
        "operationId": "get_maps_status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MapStatusDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/offering/getList": {
      "get": {
        "tags": [
          "Offering"
        ],
        "summary": "Retrieves a list of available offerings.",
        "description": "Retrieves and returns a list of components that are available as offerings.",
        "operationId": "get_offering",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/updateDeviceStatus": {
      "put": {
        "tags": [
          "General"
        ],
        "summary": "Updates device status.",
        "description": "Updates the device status based on the provided request body and returns a success response.",
        "operationId": "update_device_status",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceStatusDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": ""
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppErrorResponse": {
        "type": "object",
        "required": [
          "name",
          "statusCode",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "Command": {
        "type": "string",
        "enum": [
          "Discovery"
        ]
      },
      "ComponentReqDto": {
        "type": "object",
        "required": [
          "name",
          "versionNumber",
          "catalogId"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "releaseNotes": {
            "type": "string"
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentReqDto"
            }
          },
          "versionNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ComponentResDto": {
        "type": "object",
        "required": [
          "name",
          "versionNumber",
          "catalogId"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "delivery": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Delivery"
              }
            ],
            "nullable": true
          },
          "deploy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Deploy"
              }
            ],
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "offer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Offer"
              }
            ],
            "nullable": true
          },
          "releaseNotes": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ComponentStatus"
          },
          "subComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentResDto"
            }
          },
          "versionNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ComponentStatus": {
        "type": "string",
        "enum": [
          "discovery",
          "offered",
          "delivery",
          "deploy"
        ]
      },
      "Delivery": {
        "type": "object",
        "required": [
          "refId",
          "isStartDeploy",
          "type"
        ],
        "properties": {
          "bitNumber": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveryStatus": {
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "downloadData": {
            "type": "number",
            "format": "float"
          },
          "downloadDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "downloadEstimateTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "downloadSpeed": {
            "type": "number",
            "format": "double"
          },
          "downloadStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "downloadStop": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isStartDeploy": {
            "type": "boolean"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "DeliveryStatus": {
        "type": "string",
        "enum": [
          "Start",
          "Done",
          "Error",
          "Cancelled",
          "Pause",
          "Continue",
          "Download"
        ]
      },
      "DeliveryStatusDto": {
        "type": "object",
        "required": [
          "importRequestId",
          "state"
        ],
        "properties": {
          "downloadData": {
            "type": "number",
            "format": "float"
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "estimationTimeToDownload": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "importRequestId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/DeliveryStatus"
          }
        }
      },
      "Deploy": {
        "type": "object",
        "required": [
          "refId",
          "type"
        ],
        "properties": {
          "currentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployChangeState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          },
          "deployDone": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployEstimateTime": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "deployStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deployStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          },
          "deployStop": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "messageLog": {
            "type": "string",
            "nullable": true
          },
          "refId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "DeployChangeStateDto": {
        "type": "object",
        "properties": {
          "deployChangeState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          }
        }
      },
      "DeploymentStatus": {
        "type": "string",
        "enum": [
          "Start",
          "Done",
          "Installing",
          "Continue",
          "Pause",
          "Cancelled",
          "Error",
          "Uninstall"
        ]
      },
      "DeviceStatusDto": {
        "type": "object",
        "required": [
          "deviceId",
          "availableStorageInKB"
        ],
        "properties": {
          "availableBattery": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "availableStorageInKB": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "deviceId": {
            "type": "string"
          }
        }
      },
      "General": {
        "type": "object",
        "required": [
          "personalDevice",
          "situationalDevice",
          "physicalDevice"
        ],
        "properties": {
          "personalDevice": {
            "$ref": "#/components/schemas/PersonalDevice"
          },
          "physicalDevice": {
            "$ref": "#/components/schemas/PhysicalDevice"
          },
          "situationalDevice": {
            "$ref": "#/components/schemas/SituationalDevice"
          }
        }
      },
      "GeneralData": {
        "type": "object",
        "required": [
          "general",
          "softwareData"
        ],
        "properties": {
          "discoveryType": {
            "type": "string",
            "nullable": true
          },
          "general": {
            "$ref": "#/components/schemas/General"
          },
          "softwareData": {
            "$ref": "#/components/schemas/SoftwareData"
          }
        }
      },
      "IMCommandDto": {
        "type": "object",
        "required": [
          "command"
        ],
        "properties": {
          "command": {
            "$ref": "#/components/schemas/Command"
          }
        }
      },
      "ItemType": {
        "type": "string",
        "enum": [
          "software",
          "map",
          "cache"
        ]
      },
      "Location": {
        "type": "object",
        "required": [
          "lat",
          "long",
          "alt"
        ],
        "properties": {
          "alt": {
            "type": "string"
          },
          "lat": {
            "type": "string"
          },
          "long": {
            "type": "string"
          }
        }
      },
      "MapCreateDto": {
        "type": "object",
        "required": [
          "mapProperties"
        ],
        "properties": {
          "mapProperties": {
            "$ref": "#/components/schemas/MapPropsDto"
          }
        }
      },
      "MapCreateStatus": {
        "type": "string",
        "enum": [
          "Start",
          "InProgress",
          "Done",
          "Cancel",
          "Error",
          "Pause",
          "Pending",
          "Expired",
          "Archived"
        ]
      },
      "MapCreateStatusResDto": {
        "type": "object",
        "required": [
          "importRequestId",
          "status"
        ],
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "importRequestId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/MapCreateStatus"
          }
        }
      },
      "MapDeployStatusMesDto": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "errorMessage": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/DeploymentStatus"
          }
        }
      },
      "MapIsUpdateDto": {
        "type": "object",
        "required": [
          "reqId",
          "isUpdate"
        ],
        "properties": {
          "isUpdate": {
            "type": "boolean"
          },
          "reqId": {
            "type": "string"
          }
        }
      },
      "MapProps": {
        "type": "object",
        "required": [
          "productName",
          "productId",
          "boundingBox",
          "zoomLevel",
          "targetResolution"
        ],
        "properties": {
          "boundingBox": {
            "type": "string"
          },
          "lastUpdateAfter": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "targetResolution": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "zoomLevel": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "MapPropsDto": {
        "type": "object",
        "required": [
          "boundingBox"
        ],
        "properties": {
          "boundingBox": {
            "type": "string"
          },
          "doFast": {
            "type": "boolean",
            "nullable": true
          },
          "lastUpdateAfter": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "nullable": true
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "targetResolution": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          },
          "zoomLevel": {
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "minimum": 0
          }
        }
      },
      "MapState": {
        "type": "string",
        "enum": [
          "create",
          "delivery",
          "deploy"
        ]
      },
      "MapStatusDto": {
        "type": "object",
        "required": [
          "reqId",
          "mapProperties",
          "isUpdated",
          "state"
        ],
        "properties": {
          "area": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "errMes": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "footprint": {
            "type": "string",
            "nullable": true
          },
          "isUpdated": {
            "type": "boolean"
          },
          "mapProperties": {
            "$ref": "#/components/schemas/MapProps"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "progress": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "reqId": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/MapState"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentStatus"
              }
            ],
            "nullable": true
          }
        }
      },
      "MepStatusMsgDto": {
        "type": "object",
        "required": [
          "importRequestId"
        ],
        "properties": {
          "importRequestId": {
            "type": "string"
          }
        }
      },
      "Offer": {
        "type": "object",
        "required": [
          "catalogId",
          "isStartDownload"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "isStartDownload": {
            "type": "boolean"
          }
        }
      },
      "OfferingCompRes": {
        "type": "object",
        "required": [
          "isNewVersion"
        ],
        "properties": {
          "isNewVersion": {
            "type": "boolean"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlatformRes"
              }
            ],
            "nullable": true
          }
        }
      },
      "OfferingRes": {
        "type": "object",
        "required": [
          "software"
        ],
        "properties": {
          "maps": {
            "type": "string",
            "nullable": true
          },
          "software": {
            "$ref": "#/components/schemas/OfferingCompRes"
          }
        }
      },
      "PersonalDevice": {
        "type": "object",
        "required": [
          "name",
          "idNumber",
          "personalNumber"
        ],
        "properties": {
          "idNumber": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "personalNumber": {
            "type": "string"
          }
        }
      },
      "PhysicalDevice": {
        "type": "object",
        "required": [
          "MAC",
          "ID",
          "IP",
          "OS",
          "serialNumber",
          "possibleBandwidth",
          "availableStorage"
        ],
        "properties": {
          "ID": {
            "type": "string"
          },
          "IP": {
            "type": "string"
          },
          "MAC": {
            "type": "string"
          },
          "OS": {
            "type": "string"
          },
          "availableStorage": {
            "type": "string"
          },
          "possibleBandwidth": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          }
        }
      },
      "Platform": {
        "type": "object",
        "required": [
          "name",
          "platformNumber",
          "virtualSize"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "platformNumber": {
            "type": "string"
          },
          "virtualSize": {
            "type": "integer"
          }
        }
      },
      "PlatformRes": {
        "type": "object",
        "required": [
          "name",
          "components"
        ],
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentResDto"
            }
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PrepareDeliveryReqDto": {
        "type": "object",
        "required": [
          "catalogId",
          "deviceId",
          "itemType"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "deviceId": {
            "type": "string"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          }
        }
      },
      "PrepareDeliveryResDto": {
        "type": "object",
        "required": [
          "catalogId",
          "status"
        ],
        "properties": {
          "catalogId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PrepareStatus"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PrepareStatus": {
        "type": "string",
        "enum": [
          "start",
          "inProgress",
          "done",
          "error"
        ]
      },
      "SituationalDevice": {
        "type": "object",
        "required": [
          "weather",
          "bandwidth",
          "time",
          "operativeState",
          "power",
          "location"
        ],
        "properties": {
          "bandwidth": {
            "type": "integer",
            "format": "int64"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "operativeState": {
            "type": "boolean"
          },
          "power": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "time": {
            "type": "string"
          },
          "weather": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "SoftwareData": {
        "type": "object",
        "required": [
          "formation",
          "platform"
        ],
        "properties": {
          "formation": {
            "type": "string"
          },
          "platform": {
            "$ref": "#/components/schemas/Platform"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Discovery",
      "description": "Endpoints related to discovering and retrieving information about components available for delivery."
    },
    {
      "name": "Delivery",
      "description": "Endpoints related to managing the delivery of software components. This includes starting, pausing, canceling, and retrieving the status of deliveries, as well as preparing and retrieving prepared delivery information."
    },
    {
      "name": "General",
      "description": "Endpoints related to managing and retrieving general device information and status."
    },
    {
      "name": "Deploy",
      "description": "Endpoints related to managing and retrieving information about component deployment operations."
    },
    {
      "name": "Offering",
      "description": "Endpoints related to retrieving information about available offerings."
    },
    {
      "name": "Map Import - Create",
      "description": "Endpoints related to managing and retrieving information about map export processes."
    },
    {
      "name": "Map Import - Delivery",
      "description": "Endpoints for managing the download and status of map stamps."
    },
    {
      "name": "Map Import - Deploy",
      "description": "Endpoints related to managing and retrieving information about map deployment processes."
    },
    {
      "name": "Map - Inventory",
      "description": "Endpoints for managing and querying map inventory, including status updates, inventory discovery, and deletion operations."
    },
    {
      "name": "Installation Machine",
      "description": "Endpoints related to managing communication and synchronization tasks for an Installation Machine within the system."
    }
  ]
}